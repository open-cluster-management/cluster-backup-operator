/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"fmt"
	"sort"
	"strings"
	"time"

	"github.com/go-logr/logr"
	v1beta1 "github.com/stolostron/cluster-backup-operator/api/v1beta1"
	veleroapi "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/api/meta"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/dynamic"
	clusterv1 "open-cluster-management.io/api/cluster/v1"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

const (
	activateLabel        = "cluster.open-cluster-management.io/msa-secret" // #nosec G101 -- This is a false positive
	autoImportSecretName = "auto-import-secret"                            // #nosec G101 -- This is a false positive
)

var (
	// used for restore purposes; it differs from the
	// veleroScheduleNames by having the hive and cluster credentials backups
	// which are generated by the acm2.6 - oadp 1.0
	veleroBackupNames = map[ResourceType]string{
		Credentials:        "acm-credentials-schedule",
		CredentialsHive:    "acm-credentials-hive-schedule",
		CredentialsCluster: "acm-credentials-cluster-schedule",
		Resources:          "acm-resources-schedule",
		ResourcesGeneric:   "acm-resources-generic-schedule",
		ManagedClusters:    "acm-managed-clusters-schedule",
		ValidationSchedule: "acm-validation-policy-schedule",
	}
)

func isVeleroRestoreFinished(restore *veleroapi.Restore) bool {
	switch {
	case restore == nil:
		return false
	case len(restore.Status.Phase) == 0 || // if no restore exists
		restore.Status.Phase == veleroapi.RestorePhaseNew ||
		restore.Status.Phase == veleroapi.RestorePhaseInProgress:
		return false
	}
	return true
}

func isVeleroRestoreRunning(restore *veleroapi.Restore) bool {
	switch {
	case restore == nil:
		return false
	case
		restore.Status.Phase == veleroapi.RestorePhaseNew ||
			restore.Status.Phase == veleroapi.RestorePhaseInProgress:
		return true
	}
	return false
}

func isValidSyncOptions(restore *v1beta1.Restore) (bool, string) {

	if !restore.Spec.SyncRestoreWithNewBackups {
		return false, ""
	}

	if restore.Spec.VeleroManagedClustersBackupName == nil ||
		restore.Spec.VeleroCredentialsBackupName == nil ||
		restore.Spec.VeleroResourcesBackupName == nil {
		return false, "Some Velero backup names are not set."
	}

	backupName := ""

	backupName = *restore.Spec.VeleroManagedClustersBackupName
	backupName = strings.ToLower(strings.TrimSpace(backupName))

	if backupName != skipRestoreStr && backupName != latestBackupStr {
		return false, "VeleroManagedClustersBackupName should be set to skip or latest."
	}

	backupName = *restore.Spec.VeleroCredentialsBackupName
	backupName = strings.ToLower(strings.TrimSpace(backupName))

	if backupName != latestBackupStr {
		return false, "VeleroCredentialsBackupName should be set to latest."
	}

	backupName = *restore.Spec.VeleroResourcesBackupName
	backupName = strings.ToLower(strings.TrimSpace(backupName))

	if backupName != latestBackupStr {
		return false, "VeleroResourcesBackupName should be set to latest."
	}
	return true, ""
}

func isSkipAllRestores(restore *v1beta1.Restore) bool {

	backupName := ""

	if restore.Spec.VeleroManagedClustersBackupName != nil {
		backupName = *restore.Spec.VeleroManagedClustersBackupName
		backupName = strings.ToLower(strings.TrimSpace(backupName))

		if backupName != skipRestoreStr {
			return false
		}
	}

	if restore.Spec.VeleroCredentialsBackupName != nil {
		backupName = *restore.Spec.VeleroCredentialsBackupName
		backupName = strings.ToLower(strings.TrimSpace(backupName))

		if backupName != skipRestoreStr {
			return false
		}
	}

	if restore.Spec.VeleroResourcesBackupName != nil {
		backupName = *restore.Spec.VeleroResourcesBackupName
		backupName = strings.ToLower(strings.TrimSpace(backupName))

		if backupName != skipRestoreStr {
			return false
		}
	}

	return true
}

func updateRestoreStatus(
	logger logr.Logger,
	status v1beta1.RestorePhase,
	msg string,
	restore *v1beta1.Restore,
) {
	logger.Info(msg)

	restore.Status.Phase = status
	restore.Status.LastMessage = msg
}

// delete resource
// returns bool - resource was processed
// exception during execution
func deleteDynamicResource(
	ctx context.Context,
	mapping *meta.RESTMapping,
	dr dynamic.NamespaceableResourceInterface,
	resource unstructured.Unstructured,
	deleteOptions v1.DeleteOptions,
	excludedNamespaces []string,
) (bool, string) {
	logger := log.FromContext(ctx)
	localCluster := "local-cluster"

	nsSkipMsg := fmt.Sprintf(
		"Skipping resource %s [%s.%s]",
		resource.GetKind(),
		resource.GetName(),
		resource.GetNamespace())

	if resource.GetName() == localCluster ||
		(mapping.Scope.Name() == meta.RESTScopeNameNamespace &&
			(resource.GetNamespace() == localCluster ||
				findValue(excludedNamespaces, resource.GetNamespace()))) {
		// do not clean up local-cluster resources or resources from excluded NS
		logger.Info(nsSkipMsg)
		return false, ""
	}

	if resource.GetLabels() != nil &&
		(resource.GetLabels()["velero.io/exclude-from-backup"] == "true" ||
			resource.GetLabels()["installer.name"] == "multiclusterhub") {
		// do not cleanup resources with a velero.io/exclude-from-backup=true label, they are not backed up
		// do not backup subscriptions created by the mch in a separate NS
		logger.Info(nsSkipMsg)
		return false, ""
	}

	nsScopedMsg := fmt.Sprintf(
		"Deleting resource %s [%s.%s]",
		resource.GetKind(),
		resource.GetName(),
		resource.GetNamespace())

	nsScopedPatchMsg := fmt.Sprintf(
		"Removing finalizers for %s [%s.%s]",
		resource.GetKind(),
		resource.GetName(),
		resource.GetNamespace())

	globalResourceMsg := fmt.Sprintf(
		"Deleting resource %s [%s]",
		resource.GetKind(),
		resource.GetName())

	globalResourcePatchMsg := fmt.Sprintf(
		"Removing finalizers for %s [%s]",
		resource.GetKind(),
		resource.GetName())

	errMsg := ""
	patch := `[ { "op": "remove", "path": "/metadata/finalizers" } ]`
	if mapping.Scope.Name() == meta.RESTScopeNameNamespace {
		// namespaced resources should specify the namespace
		logger.Info(nsScopedMsg)
		if err := dr.Namespace(resource.GetNamespace()).Delete(ctx, resource.GetName(), deleteOptions); err != nil {
			errMsg = err.Error()
		} else {
			if resource.GetFinalizers() != nil && len(resource.GetFinalizers()) > 0 {
				logger.Info(nsScopedPatchMsg)
				// delete finalizers and delete resource in this way
				if _, err := dr.Namespace(resource.GetNamespace()).Patch(ctx, resource.GetName(),
					types.JSONPatchType, []byte(patch), v1.PatchOptions{}); err != nil {
					errMsg = err.Error()
				}
			}
		}
	} else {
		// for cluster-wide resources
		logger.Info(globalResourceMsg)
		if err := dr.Delete(ctx, resource.GetName(), deleteOptions); err != nil {
			errMsg = err.Error()
		} else {
			if resource.GetFinalizers() != nil && len(resource.GetFinalizers()) > 0 {
				// delete finalizers and delete resource in this way
				logger.Info(globalResourcePatchMsg)
				if _, err := dr.Patch(ctx, resource.GetName(),
					types.JSONPatchType, []byte(patch), v1.PatchOptions{}); err != nil {
					errMsg = err.Error()
				}
			}
		}
	}
	if errMsg != "" {
		logger.Info(errMsg)
	}
	return true, errMsg
}

// clean up resources for the restored backup resources
func (r *RestoreReconciler) prepareRestoreForBackup(
	ctx context.Context,
	acmRestore *v1beta1.Restore,
	restoreOptions RestoreOptions,
	restoreType ResourceType,
	veleroBackup *veleroapi.Backup,
	additionalLabels string,
) {
	logger := log.FromContext(ctx)

	logger.Info("enter prepareForRestoreResources for " + string(restoreType))

	r.Recorder.Event(
		acmRestore,
		corev1.EventTypeNormal,
		"Prepare to restore:",
		"Cleaning up resources for backup "+veleroBackup.Name,
	)

	labelSelector := ""
	if restoreOptions.cleanupType == v1beta1.CleanupTypeRestored ||
		restoreType == ResourcesGeneric {
		// delete each resource from included resources, if it has a velero annotation
		// meaning that the resource was created by another restore
		labelSelector = "velero.io/backup-name,"
	}
	switch restoreType {
	case Resources:
		labelSelector = labelSelector + "!" + policyRootLabel
	case ResourcesGeneric:
		labelSelector = labelSelector + backupCredsClusterLabel
	case Credentials:
		labelSelector = labelSelector + backupCredsUserLabel +
			"," + backupCredsHiveLabel +
			"," + backupCredsClusterLabel
	}

	if additionalLabels != "" {
		labelSelector = labelSelector + ", " + additionalLabels
	}
	labelSelector = strings.TrimPrefix(labelSelector, ",")
	labelSelector = strings.TrimSuffix(labelSelector, ",")

	var resources []string
	if restoreType != ResourcesGeneric {
		resources = veleroBackup.Spec.IncludedResources

		if restoreType == Resources {
			// include managed cluster resources, they need to be cleaned up even if the managed clusters are not restored now
			for i := range backupManagedClusterResources {
				resources = appendUnique(
					resources,
					backupManagedClusterResources[i],
				)
			}
		}
	} else {
		// for generic resources get all CRDs and exclude the ones in the veleroBackup.Spec.ExcludedResources
		resources, _ = getGenericCRDFromAPIGroups(ctx, restoreOptions.dynamicArgs.dc, veleroBackup)
	}

	for i := range resources {

		kind, groupName := getResourceDetails(resources[i])

		if kind == "clusterimageset" || kind == "hiveconfig" {
			// ignore clusterimagesets and hiveconfig
			continue
		}

		if kind == "clusterdeployment" || kind == "machinepool" {
			// old backups have a short version for these resource
			groupName = "hive.openshift.io"
		}

		groupKind := schema.GroupKind{
			Group: groupName,
			Kind:  kind,
		}
		mapping, err := restoreOptions.dynamicArgs.mapper.RESTMapping(groupKind, "")
		if err != nil {
			logger.Info(fmt.Sprintf("Failed to get dynamic mapper for group=%s, error : %s",
				groupKind, err.Error()))
			continue
		}
		var dr = restoreOptions.dynamicArgs.dyn.Resource(mapping.Resource)
		if dr != nil {
			var listOptions = v1.ListOptions{}
			if labelSelector != "" {
				listOptions = v1.ListOptions{LabelSelector: labelSelector}
			}

			dynamiclist, err := dr.List(ctx, listOptions)
			if err == nil {
				// get all items and delete them
				for i := range dynamiclist.Items {
					deleteDynamicResource(
						ctx,
						mapping,
						dr,
						dynamiclist.Items[i],
						restoreOptions.deleteOptions,
						veleroBackup.Spec.ExcludedNamespaces,
					)
				}
			}
		}
	}
	logger.Info("exit prepareForRestoreResources for " + string(restoreType))
}

// activate managed clusters by creating auto-import-secret
func postRestoreActivation(
	ctx context.Context,
	c client.Client,
	msaSecrets []corev1.Secret,
	managedClusters []clusterv1.ManagedCluster,
	currentTime time.Time,
) []string {
	logger := log.FromContext(ctx)
	logger.Info("enter postRestoreActivation")
	// return the list of auto import secrets created here
	autoImportSecretsCreated := []string{}

	processedClusters := []string{}
	for s := range msaSecrets {
		secret := msaSecrets[s]

		clusterName := secret.Namespace
		if findValue(processedClusters, clusterName) ||
			clusterName == "local-cluster" {
			// this cluster should not be processed
			continue
		}
		accessToken := ""
		if accessToken = findValidMSAToken([]corev1.Secret{secret}, currentTime); accessToken == "" {
			// this secret should not be processed
			continue
		}

		// found a valid access token for this cluster name, add it to the list
		processedClusters = append(processedClusters, clusterName)

		reimport, url := managedClusterShouldReimport(ctx, managedClusters, clusterName)
		if !reimport {
			// no need to reimport this managed cluster
			// the cluster is already active or the url is not set
			continue
		}

		// see if an auto-import-secret already exists
		// delete and re-create if is from a previous post-restore activation
		secretIdentity := types.NamespacedName{
			Name:      autoImportSecretName,
			Namespace: clusterName,
		}
		autoImportSecret := &corev1.Secret{}
		if err := c.Get(ctx, secretIdentity, autoImportSecret); err == nil &&
			autoImportSecret.GetLabels() != nil &&
			autoImportSecret.GetLabels()[activateLabel] == "true" {
			// found secret
			if err := c.Delete(ctx, autoImportSecret); err != nil {
				logger.Error(
					err,
					fmt.Sprintf(
						"failed to delete the auto-import-secret from namespace %s",
						clusterName,
					),
				)
			} else {
				logger.Info("deleted auto-import-secret from namespace " + clusterName)
			}
		}

		// create an auto-import-secret for this managed cluster
		if err := createAutoImportSecret(ctx, c, clusterName, accessToken, url); err != nil {
			logger.Error(err, "Error in creating AutoImportSecret")
		} else {
			autoImportSecretsCreated = append(autoImportSecretsCreated, clusterName)
			logger.Info("created auto-import-secret for managed cluster " + clusterName)
		}
	}

	return autoImportSecretsCreated
}

// create an autoImportSecret using the url and accessToken
func createAutoImportSecret(
	ctx context.Context,
	c client.Client,
	namespace string,
	accessToken string,
	url string,
) error {
	autoImportSecret := &corev1.Secret{}
	autoImportSecret.Name = autoImportSecretName
	autoImportSecret.Namespace = namespace
	autoImportSecret.Type = corev1.SecretTypeOpaque
	// set labels
	labels := make(map[string]string)
	labels[activateLabel] = "true"
	autoImportSecret.SetLabels(labels)
	// set data
	stringData := make(map[string]string)
	stringData["autoImportRetry"] = "5"
	stringData["server"] = url
	stringData["token"] = accessToken
	autoImportSecret.StringData = stringData

	return c.Create(ctx, autoImportSecret, &client.CreateOptions{})
}

// check if there is any active resource on this cluster
func isOtherResourcesRunning(
	ctx context.Context,
	c client.Client,
	restore *v1beta1.Restore,
) (string, error) {
	// don't create restore if an active schedule exists
	backupScheduleList := v1beta1.BackupScheduleList{}
	if err := c.List(
		ctx,
		&backupScheduleList,
		client.InNamespace(restore.Namespace),
	); err != nil {
		return "", err
	}
	backupScheduleName := isBackupScheduleRunning(backupScheduleList.Items)
	if backupScheduleName != "" {
		msg := "This resource is ignored because BackupSchedule resource " + backupScheduleName + " is currently active, " +
			"before creating another resource verify that any active resources are removed."
		return msg, nil
	}

	// don't create restore if an active restore exists
	restoreList := v1beta1.RestoreList{}
	if err := c.List(
		ctx,
		&restoreList,
		client.InNamespace(restore.Namespace),
	); err != nil {
		return "", err
	}
	otherRestoreName := isOtherRestoresRunning(restoreList.Items, restore.Name)
	if otherRestoreName != "" {
		msg := "This resource is ignored because Restore resource " + otherRestoreName + " is currently active, " +
			"before creating another resource verify that any active resources are removed."
		return msg, nil
	}

	return "", nil
}

// check if there is a backup schedule running on this cluster
func isBackupScheduleRunning(
	schedules []v1beta1.BackupSchedule,
) string {

	if len(schedules) == 0 {
		return ""
	}

	for i := range schedules {
		backupScheduleItem := schedules[i]
		if backupScheduleItem.Status.Phase != v1beta1.SchedulePhaseBackupCollision {
			return backupScheduleItem.Name
		}
	}

	return ""
}

// check if there are other restores that are not complete yet
func isOtherRestoresRunning(
	restores []v1beta1.Restore,
	restoreName string,
) string {

	if len(restores) == 0 {
		return ""
	}

	for i := range restores {
		restoreItem := restores[i]
		if restoreItem.Name == restoreName {
			continue
		}
		if restoreItem.Status.Phase != v1beta1.RestorePhaseFinished &&
			restoreItem.Status.Phase != v1beta1.RestorePhaseFinishedWithErrors {
			return restoreItem.Name
		}
	}

	return ""
}

func isNewBackupAvailable(
	ctx context.Context,
	c client.Client,
	restore *v1beta1.Restore,
	resourceType ResourceType) bool {
	logger := log.FromContext(ctx)

	// get the latest Velero backup for this resourceType
	// this backup might be newer than the backup which
	// was used in the latest Velero restore for this resourceType
	veleroBackups := &veleroapi.BackupList{}
	if err := c.List(ctx, veleroBackups, client.InNamespace(restore.Namespace)); err == nil {

		newVeleroBackupName, newVeleroBackup, err := getVeleroBackupName(
			ctx,
			c,
			restore.Namespace,
			resourceType,
			latestBackupStr,
			veleroBackups,
		)
		if err != nil {
			logger.Error(
				err,
				"Failed to get new Velero backup for resource type "+string(resourceType),
			)
			return false
		}

		// find the latest velero restore for this resourceType
		latestVeleroRestoreName := ""
		switch resourceType {
		case Resources:
			latestVeleroRestoreName = restore.Status.VeleroResourcesRestoreName
		case Credentials:
			latestVeleroRestoreName = restore.Status.VeleroCredentialsRestoreName
		}
		if latestVeleroRestoreName == "" {
			logger.Info(
				fmt.Sprintf(
					"Failed to find the latest Velero restore name for resource type=%s, restore=%s",
					string(resourceType),
					restore.Name,
				),
			)
			return false
		}

		newVeleroRestoreName := getValidKsRestoreName(restore.Name, newVeleroBackupName)
		if latestVeleroRestoreName == newVeleroRestoreName {
			return false
		}

		latestVeleroRestore := veleroapi.Restore{}
		err = c.Get(
			ctx,
			types.NamespacedName{
				Name:      latestVeleroRestoreName,
				Namespace: restore.Namespace,
			},
			&latestVeleroRestore,
		)
		if err != nil {
			if errors.IsNotFound(err) {
				return true
			}
			logger.Error(
				err,
				"Failed to get Velero restore "+latestVeleroRestoreName,
			)
			return false
		}

		// compare the backup name and timestamp of newVeleroBackupName
		// with the backup used in the latestVeleroRestore
		if latestVeleroRestore.Spec.BackupName != newVeleroBackupName {
			latestVeleroBackup := veleroapi.Backup{}
			err := c.Get(
				ctx,
				types.NamespacedName{
					Name:      latestVeleroRestore.Spec.BackupName,
					Namespace: restore.Namespace,
				},
				&latestVeleroBackup,
			)
			if err != nil {
				if errors.IsNotFound(err) {
					return true
				}
				logger.Error(
					err,
					"Failed to get Velero backup "+latestVeleroRestore.Spec.BackupName,
				)
				return false
			}
			return latestVeleroBackup.Status.StartTimestamp.Before(
				newVeleroBackup.Status.StartTimestamp,
			)
		}
	}
	return false
}

// validate if restore settings are valid and retry on error
func validateStorageSettings(
	ctx context.Context,
	c client.Client,
	name string,
	namespace string,
	restore *v1beta1.Restore,
) (string, bool) {

	retry := true
	msg := ""

	// don't create restores if backup storage location doesn't exist or is not avaialble
	veleroStorageLocations := &veleroapi.BackupStorageLocationList{}
	if err := c.List(ctx, veleroStorageLocations, &client.ListOptions{}); err != nil ||
		veleroStorageLocations == nil || len(veleroStorageLocations.Items) == 0 {

		msg = "velero.io.BackupStorageLocation resources not found. " +
			"Verify you have created a konveyor.openshift.io.Velero or oadp.openshift.io.DataProtectionApplications resource."

		return msg, retry
	}

	// look for available VeleroStorageLocation
	// and keep track of the velero oadp namespace
	isValidStorageLocation, veleroNamespace := isValidStorageLocationDefined(
		*veleroStorageLocations,
	)

	if !isValidStorageLocation {
		msg = "Backup storage location not available in namespace " + namespace +
			". Check velero.io.BackupStorageLocation and validate storage credentials."

		return msg, retry
	}

	// return error if the cluster restore file is not in the same namespace with velero
	if veleroNamespace != namespace {
		msg = fmt.Sprintf(
			"Restore resource [%s/%s] must be created in the velero namespace [%s]",
			namespace,
			name,
			veleroNamespace,
		)
		retry = false

		return msg, retry
	}

	return msg, retry
}

// getVeleroBackupName returns the name of velero backup will be restored
func getVeleroBackupName(
	ctx context.Context,
	c client.Client,
	restoreNamespace string,
	resourceType ResourceType,
	backupName string,
	veleroBackups *veleroapi.BackupList,
) (string, *veleroapi.Backup, error) {

	if len(veleroBackups.Items) == 0 {
		return "", nil, fmt.Errorf("no velero backups found")
	}

	if backupName == latestBackupStr {
		// backup name not available, find a proper backup
		// filter available backups to get only the ones related to this resource type

		searchForBackupType := resourceType
		if resourceType == CredentialsHive ||
			resourceType == CredentialsCluster {
			// for creds hive and cluster backups get the latest Credentials backup
			// since this version of the controller no longer generates those types
			// we want to get the related hive and cluster backups based on the latest
			// controller generated cluster credentials backup - this is for backward compatibility,
			// when restoring backups which generated 3 backups for credentials
			searchForBackupType = Credentials
		}
		relatedBackups := filterBackups(veleroBackups.Items, func(bkp veleroapi.Backup) bool {
			return strings.HasPrefix(bkp.Name, veleroBackupNames[searchForBackupType]) &&
				(bkp.Status.Phase == veleroapi.BackupPhaseCompleted ||
					bkp.Status.Phase == veleroapi.BackupPhasePartiallyFailed)
		})
		if len(relatedBackups) == 0 {
			return "", nil, fmt.Errorf("no backups found")
		}
		sort.Sort(mostRecent(relatedBackups))
		// return found backup if the same type as the requested type
		//or using the orSelector (credential backup)
		if resourceType == searchForBackupType ||
			len(relatedBackups[0].Spec.OrLabelSelectors) != 0 {
			return relatedBackups[0].Name, &relatedBackups[0], nil
		}
		// otherwise, this is a hive or cluster credentials backup,
		// find the most recent based on the credential backup name
		backupName = relatedBackups[0].Name
	}

	// get the backup name for this type of resource, based on the requested resource timestamp
	if resourceType == CredentialsHive ||
		resourceType == CredentialsCluster ||
		resourceType == ResourcesGeneric {
		// first try to find a backup for this resourceType with the exact timestamp
		var computedName string
		backupTimestamp := strings.LastIndex(backupName, "-")
		if backupTimestamp != -1 {
			computedName = veleroBackupNames[resourceType] + backupName[backupTimestamp:]
		}
		exactTimeBackup := filterBackups(veleroBackups.Items, func(bkp veleroapi.Backup) bool {
			return computedName == bkp.Name
		})
		if len(exactTimeBackup) != 0 {
			return exactTimeBackup[0].Name, &exactTimeBackup[0], nil
		}
		// next try to find a backup with StartTimestamp in 30s range of the target timestamp
		targetTimestamp, err := getBackupTimestamp(backupName)
		if err != nil || targetTimestamp.IsZero() {
			return "", nil, fmt.Errorf(
				"cannot find %s Velero Backup for resourceType %s",
				backupName,
				string(resourceType),
			)
		}
		timeRangeBackups := filterBackups(veleroBackups.Items[:], func(bkp veleroapi.Backup) bool {
			if !strings.Contains(bkp.Name, veleroBackupNames[resourceType]) ||
				bkp.Status.StartTimestamp == nil {
				return false
			}
			if targetTimestamp.Sub(bkp.Status.StartTimestamp.Time).Seconds() > 30 ||
				bkp.Status.StartTimestamp.Time.Sub(targetTimestamp).Seconds() > 30 {
				return false // not related, more then 30s appart
			}
			return true
		})
		if len(timeRangeBackups) != 0 {
			return timeRangeBackups[0].Name, &timeRangeBackups[0], nil
		}
		// if no backups within the range, return error
		return "", nil, fmt.Errorf(
			"cannot find %s Velero Backup for resourceType %s",
			backupName,
			string(resourceType),
		)
	}

	// for Credentials, Resources, ManagedClusters use the exact backupName set by the user
	veleroBackup := veleroapi.Backup{}
	err := c.Get(
		ctx,
		types.NamespacedName{Name: backupName, Namespace: restoreNamespace},
		&veleroBackup,
	)
	if err == nil {
		return backupName, &veleroBackup, nil
	}
	return "", nil, fmt.Errorf("cannot find %s Velero Backup: %v", backupName, err)
}

func isValidCleanupOption(
	acmRestore *v1beta1.Restore,
) string {

	if ok := findValue([]string{v1beta1.CleanupTypeAll,
		v1beta1.CleanupTypeNone,
		v1beta1.CleanupTypeRestored},
		string(acmRestore.Spec.CleanupBeforeRestore)); !ok {

		msg := "invalid CleanupBeforeRestore value : " +
			string(acmRestore.Spec.CleanupBeforeRestore)
		return msg

	}

	return ""
}

// retrieve the backup details for this restore object
// based on the restore spec options
func retrieveRestoreDetails(
	ctx context.Context,
	c client.Client,
	s *runtime.Scheme,
	acmRestore *v1beta1.Restore,
	restoreOnlyManagedClusters bool,
) (map[ResourceType]*veleroapi.Restore,
	map[ResourceType]*veleroapi.Backup,
	error) {

	restoreLogger := log.FromContext(ctx)

	restoreLength := len(veleroBackupNames) - 1 // ignore validation backup
	if restoreOnlyManagedClusters {
		restoreLength = 2 // will get only managed clusters and generic resources
	}
	restoreKeys := make([]ResourceType, 0, restoreLength)
	for key := range veleroBackupNames {
		if key == ValidationSchedule ||
			(restoreOnlyManagedClusters && !(key == ManagedClusters || key == ResourcesGeneric)) {
			// ignore validation backup; this is used for the policy
			// to validate that there are backups schedules enabled
			// also ignore all but managed clusters when only this is restored
			continue
		}
		restoreKeys = append(restoreKeys, key)
	}
	// sort restores to restore last credentials, first resources
	// credentials could have owners in the resources path
	sort.Slice(restoreKeys, func(i, j int) bool {
		return restoreKeys[i] > restoreKeys[j]
	})
	veleroRestoresToCreate := make(map[ResourceType]*veleroapi.Restore, len(restoreKeys))
	backupsForVeleroRestores := make(map[ResourceType]*veleroapi.Backup, len(restoreKeys))

	veleroBackups := &veleroapi.BackupList{}
	if err := c.List(ctx, veleroBackups, client.InNamespace(acmRestore.Namespace)); err == nil {
		for i := range restoreKeys {
			backupName := latestBackupStr

			key := restoreKeys[i]
			switch key {
			case ManagedClusters:
				if acmRestore.Spec.VeleroManagedClustersBackupName != nil {
					backupName = *acmRestore.Spec.VeleroManagedClustersBackupName
				}
			case Credentials, CredentialsHive, CredentialsCluster:
				if acmRestore.Spec.VeleroCredentialsBackupName != nil {
					backupName = *acmRestore.Spec.VeleroCredentialsBackupName
				}
			case Resources:
				if acmRestore.Spec.VeleroResourcesBackupName != nil {
					backupName = *acmRestore.Spec.VeleroResourcesBackupName
				}
			case ResourcesGeneric:
				if acmRestore.Spec.VeleroResourcesBackupName != nil {
					backupName = *acmRestore.Spec.VeleroResourcesBackupName
				}
				if backupName == skipRestoreStr &&
					acmRestore.Spec.VeleroManagedClustersBackupName != nil {
					// if resources is set to skip but managed clusters are restored
					// we still need the generic resources
					// for the resources with the label value 'cluster-activation'
					backupName = *acmRestore.Spec.VeleroManagedClustersBackupName
				}
			}

			backupName = strings.ToLower(strings.TrimSpace(backupName))

			if backupName == "" {
				acmRestore.Status.LastMessage = fmt.Sprintf(
					"Backup name not found for resource type: %s",
					key,
				)
				return veleroRestoresToCreate, backupsForVeleroRestores, fmt.Errorf(
					"backup name not found",
				)
			}

			if backupName == skipRestoreStr {
				continue
			}

			veleroRestore := &veleroapi.Restore{}
			veleroBackupName, veleroBackup, err := getVeleroBackupName(
				ctx,
				c,
				acmRestore.Namespace,
				key,
				backupName,
				veleroBackups,
			)
			if err != nil {

				if key != CredentialsHive && key != CredentialsCluster && key != ResourcesGeneric {
					// ignore missing hive or cluster key backup files
					// for the case when the backups were created with an older controller version
					// or with oadp 1.1 when the OrSelector has being used
					restoreLogger.Info(
						"backup name not found, skipping restore for",
						"name", acmRestore.Name,
						"namespace", acmRestore.Namespace,
						"type", key,
					)
					acmRestore.Status.LastMessage = fmt.Sprintf(
						"Backup %s Not found for resource type: %s",
						backupName,
						key,
					)

					return veleroRestoresToCreate, backupsForVeleroRestores, err
				}
			} else {
				veleroRestore.Name = getValidKsRestoreName(acmRestore.Name, veleroBackupName)

				veleroRestore.Namespace = acmRestore.Namespace
				veleroRestore.Spec.BackupName = veleroBackupName
				// update existing resources if part of the new backup
				veleroRestore.Spec.ExistingResourcePolicy = veleroapi.PolicyTypeUpdate

				if err := ctrl.SetControllerReference(acmRestore, veleroRestore, s); err != nil {
					acmRestore.Status.LastMessage = fmt.Sprintf(
						"Could not set controller reference for resource type: %s",
						key,
					)
					return veleroRestoresToCreate, backupsForVeleroRestores, err
				}
				veleroRestoresToCreate[key] = veleroRestore
				backupsForVeleroRestores[key] = veleroBackup
			}
		}
	}
	return veleroRestoresToCreate, backupsForVeleroRestores, nil
}
